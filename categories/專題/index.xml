<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>專題 on Ptzu's blog</title><link>https://ptzu.github.io/categories/%E5%B0%88%E9%A1%8C/</link><description>Recent content in 專題 on Ptzu's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 Sep 2017 10:12:28 +0000</lastBuildDate><atom:link href="https://ptzu.github.io/categories/%E5%B0%88%E9%A1%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>IIS Express 遠端(內網)存取</title><link>https://ptzu.github.io/posts/iisremoteaccess/</link><pubDate>Fri, 22 Sep 2017 10:12:28 +0000</pubDate><guid>https://ptzu.github.io/posts/iisremoteaccess/</guid><description>在測試 Web API 的時候, localhost 測都沒有問題 但是在不同電腦上測卻出現了 400 Bad Request 找了蠻多資料才解決 因為預設只開放 localhost 連線 所以我們必須做一些設定才可遠端連線 整理如下:
設定IP 在 cmd 輸入 ipconfig 取得本機IP
取得專案 port 使用 netsh 將本機 IP 及 port 加入 URL 保留區 檢查設定 netsh http show urlacl 刪除設定 測試完再做刪除就好
netsh http delete urlacl url=http://192.168.1.101:51320/ 修改 IIS Express 設定 在&amp;quot;專案&amp;quot;資料夾下找到
.vs/config 資料夾中的 applicationhost.config 打開之後在裡頭添加 binding 註: VS2013是採用集中管理, VS2015之後將設定檔改成分散式管理, 也就是在各個專案之中, 注意版本, 修改錯設定檔會沒有效果 修改防火牆規則 在輸入規則添加專案所使用的 port 添加方法不再贅述 測試結果 打開 IIS Express 應該要有 2 個站台 可能遇到的問題 打不開網頁 請用管理員權限打開 Visual Studio 出現 503 Service Unvailable binding 設定沒設定好 注意是否修改錯檔案</description></item><item><title>透過 RS232 進行電腦訊息互傳</title><link>https://ptzu.github.io/posts/rs232-implement/</link><pubDate>Fri, 09 Jun 2017 14:47:40 +0000</pubDate><guid>https://ptzu.github.io/posts/rs232-implement/</guid><description>禮拜一花了 9 個小時 完成了電腦之間用 RS232 互傳 以及電腦對字幕機的寫入
需要器材 兩條 USB 轉 RS232接線 RS232 兩端母對母的線 母對母的需要對TX, RX做跳線(外面賣的是沒有跳線) 電腦之間互傳 首先是我們在網路上找到的 RS232 C Library RS232 下載
打開下載回來的 RS232 包 可以看到裡面有 demo_tx.c 和 demo_rx.c TX, RX 分別代表傳輸和接收
TX 要修改的是 cport_nr 這個變數 他代表要用哪個連接埠傳輸, 可以到裝置管理員看是哪一個 我們的是 COM4 所以改成 cport_nr=3 然後 bdrate 代表的是 baud rate, 是傳輸速率
/************************************************** file: demo_tx.c purpose: simple demo that transmits characters to the serial port and print them on the screen, exit the program by pressing Ctrl-C compile with the command: gcc demo_tx.</description></item><item><title>Windows 上安裝 mosquitto</title><link>https://ptzu.github.io/posts/mosquitto-configure/</link><pubDate>Mon, 15 May 2017 20:40:31 +0000</pubDate><guid>https://ptzu.github.io/posts/mosquitto-configure/</guid><description>所需檔案 Mosquitto for Windows Win32 OpenSSL pthread-win32 根據路徑找到檔案下載 安裝 mosquitto 執行 mosquitto 安裝程式
過程選擇安裝路徑 勾選下面那個 接著按 Next, 應該會出現以下錯誤畫面 因為我們缺少 libeay32.dll 和 ssleay32.dll
安裝需要的元件 回到最上面說的, 在Win32 OpenSSL那裡有下載了安裝檔 我們要安裝它來取得 libeay32.dll 和 ssleay32.dll
選擇安裝路徑 最後面的畫面是要你捐錢, 沒有要捐就把它勾掉吧 然後我們到安裝好的資料夾取出 libeay32.dll 和 ssleay32.dll 以及在 pthread-win32 下載的 pthreadVC2.dll 一起放到剛剛未完成安裝的 mosquitto 資料夾
到這邊就安裝完成了！
啟動 mosquitto 伺服器 到工作管理員/服務 找到 mosquitto 啟動它 簡單測試 subscribe 和 publish 本機當作伺服器測試 打開cmd
訂閱 &amp;quot;C:\Program Files (x86)\mosquitto\mosquitto_sub.exe&amp;quot; -d -h 127.</description></item><item><title>RS232雜記</title><link>https://ptzu.github.io/posts/rs232/</link><pubDate>Thu, 04 May 2017 21:29:03 +0000</pubDate><guid>https://ptzu.github.io/posts/rs232/</guid><description>1.BuildCommDCB 函數原型: BOOL BuildCommDCB( LPCTSTR lpDef, LPDCB lpDCB ). BuildCommDCB 函數是用來填寫 DCB 的資料,何謂 DCB 呢? DCB 的全名為 Device Control Block 是一資料結構,裡面定義著所有有關串列通訊(Serial Communication)的設定值,DCB 資料結構定義如下:
typedef struct _DCB { DWORD DCBlength; // DCB 的大小 (in byte) DWORD BaudRate; // 傳輸率 (baud rate) bit/秒 DWORD fBinary: 1; // 二進制模式,沒有 EOF 檢查. DWORD fParity: 1; // 同位元檢查 (parity checking) DWORD fOutxCtsFlow:1; // CTS output flow control DWORD fOutxDsrFlow:1; // DSR output flow control DWORD fDtrControl:2; // DTR flow control type DWORD fDsrSensitivity:1; // DSR sensitivity DWORD fTXContinueOnXoff:1; // XOFF continues Tx DWORD fOutX: 1; // XON/XOFF out flow control DWORD fInX: 1; // XON/XOFF in flow control DWORD fErrorChar: 1; // enable error replacement DWORD fNull: 1; // enable null stripping DWORD fRtsControl:2; // RTS flow control DWORD fAbortOnError:1; // abort reads/writes on error DWORD fDummy2:17; // reserved WORD wReserved; // not currently used WORD XonLim; // transmit XON threshold WORD XoffLim; // transmit XOFF threshold BYTE ByteSize; // 每一筆資料的 bit 數, 4-8 BYTE Parity; // 同位元 (0-4) = 無,奇同位,偶同位,mark,space BYTE StopBits; // 停止位元 (0,1,2) = 1, 1.</description></item></channel></rss>