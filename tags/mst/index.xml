<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MST on Ptzu's blog</title><link>https://ptzu.github.io/tags/mst/</link><description>Recent content in MST on Ptzu's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Jan 2018 13:11:08 +0000</lastBuildDate><atom:link href="https://ptzu.github.io/tags/mst/index.xml" rel="self" type="application/rss+xml"/><item><title>POJ 2421 Constructing Roads</title><link>https://ptzu.github.io/posts/poj2421/</link><pubDate>Fri, 12 Jan 2018 13:11:08 +0000</pubDate><guid>https://ptzu.github.io/posts/poj2421/</guid><description>題目
input 第一行輸入正整數 N, 3 &amp;lt;= N &amp;lt;= 100 代表有 N 個村莊 接著輸入一個 N * N 的相鄰矩陣, 代表邊 然後輸入一個正整數 q 接著 q 行輸入 a, b 代表 a, b 之間已經有建好路
題解 建路需要成本, 已經有些路建好 求要連接所有村莊, 最小成本是多少？
作法 求 MST, 不過這題範圍比較小 所以我拿來測試 Sollin 演算法
AC code #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;climits&amp;gt;#include &amp;lt;cstring&amp;gt; using namespace std; typedef pair &amp;lt;int,int&amp;gt; pii; typedef long long ll; #define pb push_back #define sz(a) (int)a.size() #define INF 0x3f3f3f3f #define st first #define nd second #define fio ios::sync_with_stdio(false), cin.</description></item><item><title>POJ 1258 Agri-Net</title><link>https://ptzu.github.io/posts/poj1258/</link><pubDate>Sun, 01 Oct 2017 17:01:36 +0000</pubDate><guid>https://ptzu.github.io/posts/poj1258/</guid><description>題目
input 含有多筆測資, 每筆測資開頭輸入一正整數 N, 3 &amp;lt;= N &amp;lt;= 100 代表有 N 個農場 接著輸入一個 N * N 的相鄰矩陣, 代表邊
題解 農夫 John 要在農場建立網路, 連接網路電纜需要成本 求連接所有農場的最小成本
作法 Kruskal 裸題
AC code #include &amp;lt;cstdio&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; typedef pair &amp;lt;int,int&amp;gt; pii; typedef long long ll; #define pb push_back #define sz(a) (int)a.size() #define INF 0x3f3f3f3f #define st first #define nd second #define fio ios::sync_with_stdio(false), cin.tie(0) // #define DEBUG(x) printf(&amp;#34;Here: %d\n&amp;#34;, x), exit(0); // LLONG_MIN LLONG_MAX INT_MIN INT_MAX struct Union_Find { int par[1010], num[1010]; void init(int n){ for(int i = 0; i &amp;lt; n; i++){ par[i] = i; num[i] = 1; } } int find(int x){ if(x == par[x]) return x; else return par[x] = find(par[x]); } void unite(int a, int b){ a = find(a); b = find(b); if(a == b) return ; if(num[a] &amp;gt; num[b]) swap(a, b); par[a] = b; num[b] += num[a]; } }U; struct edge{ int u, v, w; bool operator &amp;lt;(const edge&amp;amp; e) const{ return w &amp;lt; e.</description></item></channel></rss>